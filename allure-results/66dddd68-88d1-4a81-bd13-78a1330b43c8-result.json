{"name": "test_add_widget", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=135.0.7049.42)\nStacktrace:\n\tGetHandleVerifier [0x00EF5413+60691]\n\tGetHandleVerifier [0x00EF5454+60756]\n\t(No symbol) [0x00D20693]\n\t(No symbol) [0x00D0FED0]\n\t(No symbol) [0x00D2DD52]\n\t(No symbol) [0x00D93D9F]\n\t(No symbol) [0x00DADFF9]\n\t(No symbol) [0x00D8CE56]\n\t(No symbol) [0x00D5C5F3]\n\t(No symbol) [0x00D5D444]\n\tGetHandleVerifier [0x0113BBC3+2446531]\n\tGetHandleVerifier [0x01137198+2427544]\n\tGetHandleVerifier [0x01152D5E+2541150]\n\tGetHandleVerifier [0x00F0C3C5+154821]\n\tGetHandleVerifier [0x00F12BED+181485]\n\tGetHandleVerifier [0x00EFCC48+91464]\n\tGetHandleVerifier [0x00EFCDF0+91888]\n\tGetHandleVerifier [0x00EE7980+4736]\n\tBaseThreadInitThunk [0x756A5D49+25]\n\tRtlInitializeExceptionChain [0x7749CE3B+107]\n\tRtlGetAppContainerNamedObjectPath [0x7749CDC1+561]", "trace": "def test_add_widget():\n        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n        try:\n            driver.get(\"https://demo.reportportal.io/ui/#login\")\n    \n            # Ожидание и ввод логина (новые локаторы)\n            WebDriverWait(driver, 15).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"input[type='text']\"))\n            ).send_keys(\"default\")\n    \n            driver.find_element(By.CSS_SELECTOR, \"input[type='password']\").send_keys(\"1q2w3e\")\n            driver.find_element(By.CSS_SELECTOR, \"button[type='submit']\").click()\n    \n            # Ожидание загрузки dashboard\n>           WebDriverWait(driver, 20).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \".sidebarContainer\"))\n            )\n\ntest_ui.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:110: in _predicate\n    return driver.find_element(*locator)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FB21EBD160>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7749CE3B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7749CDC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=135.0.7049.42)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00EF5413+60691]\nE       \tGetHandleVerifier [0x00EF5454+60756]\nE       \t(No symbol) [0x00D20693]\nE       \t(No symbol) [0x00D0FED0]\nE       \t(No symbol) [0x00D2DD52]\nE       \t(No symbol) [0x00D93D9F]\nE       \t(No symbol) [0x00DADFF9]\nE       \t(No symbol) [0x00D8CE56]\nE       \t(No symbol) [0x00D5C5F3]\nE       \t(No symbol) [0x00D5D444]\nE       \tGetHandleVerifier [0x0113BBC3+2446531]\nE       \tGetHandleVerifier [0x01137198+2427544]\nE       \tGetHandleVerifier [0x01152D5E+2541150]\nE       \tGetHandleVerifier [0x00F0C3C5+154821]\nE       \tGetHandleVerifier [0x00F12BED+181485]\nE       \tGetHandleVerifier [0x00EFCC48+91464]\nE       \tGetHandleVerifier [0x00EFCDF0+91888]\nE       \tGetHandleVerifier [0x00EE7980+4736]\nE       \tBaseThreadInitThunk [0x756A5D49+25]\nE       \tRtlInitializeExceptionChain [0x7749CE3B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7749CDC1+561]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "start": 1743617616929, "stop": 1743617638857, "uuid": "5f74356c-ce4c-493c-b9ec-787f1bfe44e1", "historyId": "d2a1fa621f7fcabf41c137d519bfb7c5", "testCaseId": "d2a1fa621f7fcabf41c137d519bfb7c5", "fullName": "test_ui#test_add_widget", "labels": [{"name": "suite", "value": "test_ui"}, {"name": "host", "value": "DESKTOP-A6SUBLI"}, {"name": "thread", "value": "13772-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_ui"}]}